package com.msz.service.impl;

import com.aliyuncs.exceptions.ClientException;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.msz.VO.*;
import com.msz.common.PagingRequest;
import com.msz.common.UserCommon;
import com.msz.dao.*;
import com.msz.model.*;
import com.msz.service.*;
import com.msz.util.*;
import net.bytebuddy.implementation.auxiliary.AuxiliaryType;
import org.apache.velocity.runtime.directive.Foreach;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.baomidou.mybatisplus.mapper.Wrapper;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * <p>
 * 租约 服务实现类
 * </p>
 *
 * @author cww
 * @since 2019-06-03 ${time}
 */
@Service
public class MszLeaseServiceImpl extends ServiceImpl<MszLeaseMapper, MszLease> implements MszLeaseService {


    MszLeaseMapper mszLeaseMapper;
    SysCityMapper sysCityMapper;
    MszRoomMapper mszRoomMapper;
    MszOrderInfoMapper mszOrderInfoMapper;
    MszMessageMapper messageMapper;
    MszRefundInfoMapper refundInfoMapper;
    MszAccountMapper accountMapper;
    SysOrgMapper orgMapper;

    @Autowired
    public MszLeaseServiceImpl(MszLeaseMapper mszLeaseMapper, SysCityMapper sysCityMapper, MszRoomMapper mszRoomMapper,
                               MszOrderInfoMapper mszOrderInfoMapper, MszMessageMapper messageMapper, MszRefundInfoMapper refundInfoMapper, MszAccountMapper accountMapper, SysOrgMapper orgMapper) {
        this.mszLeaseMapper = mszLeaseMapper;
        this.sysCityMapper = sysCityMapper;
        this.mszRoomMapper = mszRoomMapper;
        this.mszOrderInfoMapper = mszOrderInfoMapper;
        this.messageMapper = messageMapper;
        this.refundInfoMapper = refundInfoMapper;
        this.accountMapper = accountMapper;
        this.orgMapper = orgMapper;
    }

    /**
     * @Author Maoyy
     * @Description 代码写了一行又一行
     * @Date 19:10 2019/6/13
     **/
    @Autowired
    private MszAccountService mszAccountService;
    @Autowired
    private MszRoomService mszRoomService;
    @Autowired
    private MszOrderInfoService mszOrderInfoService;
    @Autowired
    private SysUserService sysUserService;
    @Autowired
    UserCommon userCommon;
    @Autowired
    MszLeaseChargeService leaseChargeService;

    /**
     * 租约列表
     *
     * @param status
     * @return
     */
    @Override
    public PageInfo<LeaseReturnParamVO> listPage(PagingRequest pagingRequest, String status, String tenantName, SysUser user) {
        PageHelper.startPage(pagingRequest.getOffset(), pagingRequest.getLimit());
        List<LeaseReturnParamVO> leaseList;
        String role = user.getRole();
        LeaseReturnParamVO returnParamVO = new LeaseReturnParamVO();
        if (role.equals("管理员")) {
            returnParamVO.setStatus(status);
            returnParamVO.setTenantName(tenantName);
            leaseList = mszLeaseMapper.getLeaseList(returnParamVO);
            if (leaseList != null && leaseList.size() > 0) {
                leaseList.forEach(item -> {
                    item.setProvince(item.getProvinceId() == null ? "" : sysCityMapper.selectById(item.getProvinceId().toString()).getName());
                    item.setCity(item.getCityId() == null ? "" : sysCityMapper.selectById(item.getCityId().toString()).getName());
                    item.setCounty(item.getCountyId() == null ? "" : sysCityMapper.selectById(item.getCountyId().toString()).getName());
                    item.setTown(item.getTownId() == null ? "" : sysCityMapper.selectById(item.getTownId().toString()).getName());
                });
            }
        } else {
            returnParamVO.setOrgId(user.getOrgId());
            returnParamVO.setStatus(status);
            returnParamVO.setTenantName(tenantName);
            leaseList = mszLeaseMapper.getLeaseList(returnParamVO);
            if (leaseList != null && leaseList.size() > 0) {
                leaseList.forEach(item -> {
                    item.setProvince(item.getProvinceId() == null ? "" : sysCityMapper.selectById(item.getProvinceId().toString()).getName());
                    item.setCity(item.getCityId() == null ? "" : sysCityMapper.selectById(item.getCityId().toString()).getName());
                    item.setCounty(item.getCountyId() == null ? "" : sysCityMapper.selectById(item.getCountyId().toString()).getName());
                    item.setTown(item.getTownId() == null ? "" : sysCityMapper.selectById(item.getTownId().toString()).getName());
                });
            }
        }
        return new PageInfo<>(leaseList);
    }

    /**
     * 新增租约
     *
     * @param leaseParamVO
     * @return
     */
    @Override
    public boolean insertMszLease(LeaseParamVO leaseParamVO, SysUser user) {

        //1.新增房客信息
        MszAccount account = new MszAccount();
        account.setName(leaseParamVO.getTenantName());
        account.setTel(leaseParamVO.getTel());
        account.setIdCard(leaseParamVO.getIdCard());
        account.setType("2");
        account.setPwd(UUIDUtils.getUUID32());
        accountMapper.insert(account);
        //2.新增租约信息
        MszLease lease = leaseParamVO.getLease();
        lease.setTenantId(account.getId());
        lease.setNo(UUIDUtils.getOrderIdByTime());
        mszLeaseMapper.insert(lease);
        //3.添加其它收费项  计算总的应收费用
        List<MszLeaseCharge> chargeList = leaseParamVO.getLeaseChargeList();
        BigDecimal receiveTotal = lease.getRentPrice().add(lease.getDepositPrice());
        BigDecimal chargeTotal = new BigDecimal("0.00");
        if (chargeList != null && chargeList.size() > 0){
            for(int i = 0; i < chargeList.size(); i++){
                MszLeaseCharge mszLeaseCharge = chargeList.get(i);
                mszLeaseCharge.setLeaseId(lease.getId());
                chargeTotal = chargeTotal.add(mszLeaseCharge.getChargePrice());
            }
            leaseChargeService.insertBatch(chargeList);
            receiveTotal = receiveTotal.add(chargeTotal);
        }
        insertOrderInfo(lease, receiveTotal);
        return true;

    }

    private void insertOrderInfo(MszLease lease, BigDecimal receiveTotal) {
        //4.生成交费信息
        MszOrderInfo mszOrderInfo = new MszOrderInfo();
        mszOrderInfo.setOrgId(lease.getOrgId());//
        mszOrderInfo.setRoomId(lease.getRoomId());
        mszOrderInfo.setCreateTime(new Date());
        mszOrderInfo.setLeaseId(lease.getId());//获取插入后生成主键租约id
        mszOrderInfo.setRentPrice(lease.getRentPrice());//租金
        mszOrderInfo.setPaidRentPrice(lease.getPaidRentPrice());//实收租金
        mszOrderInfo.setDepositPrice(lease.getDepositPrice());//押金
        mszOrderInfo.setPaidDepositPrice(lease.getPaidDepositPrice());//实收押金
        mszOrderInfo.setBillDay(lease.getBillDay());//账单日
        mszOrderInfo.setCollectMoneyDay(lease.getCollectMoneyDay());//租金交费日
        mszOrderInfo.setAvailable(lease.getAvailable());//应用到每期交费
        mszOrderInfo.setFlag(lease.getFlag());//修改金额提醒
        String orderNo = UUIDUtils.getOrderIdByTime();
        mszOrderInfo.setNo(orderNo);//缴费编号
        mszOrderInfo.setTenantId(lease.getTenantId());//房客ID(电话号码)
        mszOrderInfo.setLandlordId(lease.getLandlordId());//房东ID
        mszOrderInfo.setEndTime(lease.getEndTime());//结束时间
        mszOrderInfo.setReceiveTotal(receiveTotal);
        mszOrderInfoMapper.insert(mszOrderInfo);
    }

    @Override
    public boolean updateMszLease(LeaseParamVO leaseParamVO) {

        //1.新增房客信息
        MszAccount account = new MszAccount();
        account.setName(leaseParamVO.getTenantName());
        account.setTel(leaseParamVO.getTel());
        account.setIdCard(leaseParamVO.getIdCard());
        account.setType("2");
        accountMapper.insert(account);
        //2.新增租约信息
        MszLease lease = leaseParamVO.getLease();
        lease.setTenantId(account.getId());
        mszLeaseMapper.insert(lease);
        //3.添加其它收费项  计算总的应收费用
        List<MszLeaseCharge> chargeList = leaseParamVO.getLeaseChargeList();
        MszSchedule schedule = leaseParamVO.getSchedule();
        BigDecimal paidAmount = schedule.getPaidAmount();//实收定金
        BigDecimal receiveTotal = lease.getRentPrice().add(lease.getDepositPrice()).subtract(paidAmount);
        BigDecimal chargeTotal = null;
        if (chargeList != null && chargeList.size() > 0){
            chargeList.forEach(item->{
                chargeTotal.add(item.getChargePrice());
                item.setLeaseId(lease.getId());
            });
            leaseChargeService.insertBatch(chargeList);
            receiveTotal = receiveTotal.add(chargeTotal);
        }
        insertOrderInfo(lease, receiveTotal);
        return true;
    }


    /**
     * 查看租约
     *
     * @param id
     * @return
     */
    @Override
    public LeaseReturnParamVO getMszLeaseById(Integer id) {
        LeaseReturnParamVO leaseDesc = mszLeaseMapper.getLeaseDesc(id);
        leaseDesc.setProvince(leaseDesc.getProvinceId() == null ? "" : sysCityMapper.selectById(leaseDesc.getProvinceId().toString()).getName()); //省份名称
        leaseDesc.setCity(leaseDesc.getCityId() == null ? "" : sysCityMapper.selectById(leaseDesc.getCityId().toString()).getName()); //城市名称
        leaseDesc.setCounty(leaseDesc.getCountyId() == null ? "" : sysCityMapper.selectById(leaseDesc.getCountyId().toString()).getName()); //区县名称
        leaseDesc.setTown(leaseDesc.getTownId() == null ? "" : sysCityMapper.selectById(leaseDesc.getTownId().toString()).getName()); //街道名称
        return leaseDesc;
    }


    @Override
    public TenantIdAndUserIdVO tenantIdAndUserId(Integer tenantId, Integer userId) {
        TenantIdAndUserIdVO vo = new TenantIdAndUserIdVO();
        vo.setMszLease(selectOne(new EntityWrapper<MszLease>().eq("tenantId", tenantId).eq("userId", userId)));
        if (vo.getMszLease() == null) { //没找到就是数据有误
            return null;
        }
        vo.setMszRoom(mszRoomService.selectById(vo.getMszLease().getRoomId()));
        if (vo.getMszLease() == null) { //没找到就是数据有误
            return null;
        }
        vo.setMszAccount(mszAccountService.selectById(vo.getMszLease().getTenantId()));
        vo.setSysUser(sysUserService.selectById(vo.getMszLease().getUserId()));
        return vo;
    }

    @Override
    public TenantIdAndUserIdVO byTenantId(Integer id) {
        TenantIdAndUserIdVO vo = new TenantIdAndUserIdVO();
        vo.setMszLease(selectOne(new EntityWrapper<MszLease>().eq("tenantId", id).andNew().eq("`status`", "1").or().eq("`status`", "0")));
        if (vo.getMszLease() == null) { //没找到就是数据有误
            return null;
        }
        if (vo.getMszLease().getOperator() != null) {
            vo.setOperator(sysUserService.selectById(vo.getMszLease().getOperator()).getTrueName());
        }
        vo.setOrderInfo(mszOrderInfoService.selectOne(new EntityWrapper<MszOrderInfo>().eq("leaseId", vo.getMszLease().getId())));
        vo.setMszRoom(mszRoomService.selectById(vo.getMszLease().getRoomId()));
        if (vo.getMszLease() == null) { //没找到就是数据有误
            return null;
        }
        vo.setMszAccount(mszAccountService.selectById(vo.getMszLease().getTenantId()));
        vo.setSysUser(sysUserService.selectById(vo.getMszLease().getUserId()));
        return vo;
    }

    @Override
    public TenantIdAndUserIdVO byId(Integer id) {
        TenantIdAndUserIdVO vo = new TenantIdAndUserIdVO();
        vo.setMszLease(selectOne(new EntityWrapper<MszLease>().eq("id", id)));
        if (vo.getMszLease() == null) { //没找到就是数据有误
            return null;
        }
        if (vo.getMszLease().getOperator() != null) {
            SysUser operator = sysUserService.selectOne(new EntityWrapper<SysUser>().eq("id", vo.getMszLease().getOperator()));
            if (operator != null) {
                vo.setOperator(operator.getTrueName() == null ? "未填写姓名" : operator.getTrueName());
            }
        }
        vo.setOrderInfo(mszOrderInfoService.selectOne(new EntityWrapper<MszOrderInfo>().eq("leaseId", vo.getMszLease().getId())));
        vo.setMszRoom(mszRoomService.selectById(vo.getMszLease().getRoomId()));
        if (vo.getMszLease() == null) { //没找到就是数据有误
            return null;
        }
        vo.setMszAccount(mszAccountService.selectById(vo.getMszLease().getTenantId()));
        vo.setSysUser(sysUserService.selectById(vo.getMszLease().getUserId()));
        return vo;
    }

    @Override
    public List<WeProgramLeaseListVO> leaseByTenantId(Integer id) {
        return mszLeaseMapper.leaseByTenantId(id);
    }

    @Override
    public LeaseNumVO getCountNum(SysUser user) {
        String role = user.getRole();
        LeaseNumVO vo = new LeaseNumVO();
        Integer orgId = user.getOrgId();
        if (role.equals("管理员")) {
            vo.setAppointmentNum(mszLeaseMapper.selectCount(new EntityWrapper<MszLease>().eq("status", "0")));
            vo.setExecuteNum(mszLeaseMapper.selectCount(new EntityWrapper<MszLease>().eq("status", "1")));
            vo.setEndNum(mszLeaseMapper.selectCount(new EntityWrapper<MszLease>().eq("status", "2")));
            vo.setExceptionNum(mszLeaseMapper.selectCount(new EntityWrapper<MszLease>().eq("status", "3")));
        } else {
            vo.setAppointmentNum(mszLeaseMapper.getLeaseNum("0", orgId));
            vo.setExecuteNum(mszLeaseMapper.getLeaseNum("1", orgId));
            vo.setEndNum(mszLeaseMapper.getLeaseNum("2", orgId));
            vo.setExceptionNum(mszLeaseMapper.getLeaseNum("3", orgId));
        }

        return vo;
    }

    @Override
    public List<MszLease> signLeaseByTenantId(Integer tenantId) {

        return mszLeaseMapper.signLeaseByTenantId(tenantId);
    }
}
