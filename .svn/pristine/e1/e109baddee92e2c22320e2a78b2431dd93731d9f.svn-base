package com.msz.controller;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.github.pagehelper.PageInfo;
import com.msz.Scheduler.LeaseScheduler;
import com.msz.VO.*;
import com.msz.annotation.CurrentUser;
import com.msz.annotation.LoginRequired;
import com.msz.common.PagingRequest;
import com.msz.common.RespEntity;
import com.msz.common.SysLogUtil;
import com.msz.common.UserCommon;
import com.msz.model.*;
import com.msz.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;

import javax.servlet.http.HttpServletRequest;
import javax.swing.text.html.parser.Entity;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;


/**
 * <p>
 * 缴费信息 前端控制器
 * </p>
 *
 * @author cww
 * @since 2019-06-03 ${time}
 */
@Api(value = "/msz-order-infos", description = "缴费信息 接口; Responseble:cww")
@RestController
@RequestMapping("/msz-order-infos")
public class MszOrderInfoController {

    private static Logger logger = LoggerFactory.getLogger(MszOrderInfoController.class);

    @Autowired
    private MszOrderInfoService mszOrderInfoService;
    @Autowired
    private MszWalletService walletService;
    @Autowired
    private MszOrderHistoryService mszOrderHistoryService;
    @Autowired
    private MszAccountService mszAccountService;
    @Autowired
    private SysLogUtil sysLogUtil;

    @GetMapping("{id}")
    @ApiOperation(value = "根据id获取单个MszOrderInfo", notes = "根据id获取单个MszOrderInfo")
    public RespEntity<MszOrderInfo> get(@PathVariable Integer id) {
        return RespEntity.ok().setResponseContent(mszOrderInfoService.selectById(id));
    }


    @ApiImplicitParams({
            @ApiImplicitParam(name = "offset", value = "起始页", required = true, paramType = "query"),
            @ApiImplicitParam(name = "limit", value = "记录数", required = true, paramType = "query"),
            @ApiImplicitParam(name = "status", value = "缴费状态 0未缴费 1已缴费", required = true, paramType = "query"),
            @ApiImplicitParam(name = "endTimeBegin", value = "起始日期"),
            @ApiImplicitParam(name = "endTimeEnd", value = "结束日期"),
            @ApiImplicitParam(name = "tenantName", value = "模糊搜索房客名称")
    })
    @ApiOperation(value = "分页查询MszOrderInfo", notes = "分页查询MszOrderInfo")
    @GetMapping("/getList")
    @LoginRequired
    public RespEntity<PageInfo<MszOrderInfoVo>> list(PagingRequest pagingRequest, String status,
                                                     String endTimeBegin, String endTimeEnd, String collectMoneyDay, String tenantName) {
        return RespEntity.ok().setResponseContent(mszOrderInfoService.listPage(pagingRequest, status, endTimeBegin, endTimeEnd, collectMoneyDay, tenantName, UserCommon.getCurrentUser()));
    }

    @ApiOperation(value = "查询 已交/未交数量", notes = "查询 已交/未交数量")
    @GetMapping("/getCountNum")
    @LoginRequired
    public RespEntity<PageInfo<MszWithdrawStatusNum>> getCountNum() {
        SysUser user = UserCommon.getCurrentUser();
        return RespEntity.ok().setResponseContent(mszOrderInfoService.getCountNum(user));
    }

    @Autowired
    private MszLeaseService mszLeaseService;

    @Autowired
    private MszRoomService mszRoomService;

    @Autowired
    private MszScheduleService mszScheduleService;

    @ApiOperation(value = "查询房客已缴费列表-------小程序(房客)@Author=Maoyy", notes = "查询房客已缴费列表-------小程序(房客)@Author=Maoyy")
    @GetMapping("/byTenant")
    public RespEntity<PageInfo<MszOrderInfo>> byTenant(Integer tenantId) {
        MszScheduleOrderInfoVO result = new MszScheduleOrderInfoVO();
        try {
            result.setOrderInfo(mszOrderInfoService.selectOne(new EntityWrapper<MszOrderInfo>().eq("tenantId", tenantId).eq("status", "0")));
            result.setSchedule(mszScheduleService.selectOne(new EntityWrapper<MszSchedule>().eq("tenant_id", tenantId)));
            if (result.getSchedule() != null) {
                result.setRoom(mszRoomService.selectById(result.getSchedule().getRoomId()));
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            return RespEntity.badRequest("查询失败");
        }
        return RespEntity.ok().setResponseContent(result);
    }

    @ApiOperation(value = "按照房客查询订单", notes = "查询房客已缴费列表")
    @GetMapping("/getPaidOrderInfo")
    public RespEntity<PageInfo<MszOrderHistory>> getPaidOrderInfo(Integer tenantId) {
        List<MszOrderHistory> result = null;
        try {
            result = mszOrderHistoryService.selectList(new EntityWrapper<MszOrderHistory>().eq("tenantId", tenantId).eq("status", "1"));
        } catch (Exception e) {
            logger.error(e.getMessage());
            return RespEntity.badRequest("查询失败");
        }
        return RespEntity.ok().setResponseContent(result);
    }

    @PutMapping("/order/{id}")
    @ApiOperation(value = "小程序房客缴费-------小程序(房客)@Author=Maoyy", notes = "小程序房客缴费-------小程序(房客)@Author=Maoyy")
    public RespEntity order(@PathVariable Integer id) {
        MszOrderInfo info = mszOrderInfoService.selectOne(new EntityWrapper<MszOrderInfo>().eq("id", id));
        if (info == null) {
            MszOrderHistory mszOrderHistory = mszOrderHistoryService.selectOne(new EntityWrapper<MszOrderHistory>().eq("id", id));
            mszOrderHistory.setArrearsFlag("0");
            mszOrderHistory.setOweTotal(new BigDecimal(0));
            mszOrderHistory.setPaidTotal(mszOrderHistory.getReceiveTotal());
            if(!mszOrderHistoryService.updateById(mszOrderHistory)){
                return RespEntity.badRequest("付款失败");
            }
        }else{
            info.setStatus("1");
            //付款后修改状态 并删除这条记录(插入到history表中)
            MszOrderHistory mszOrderHistory = new MszOrderHistory();
            mszOrderHistory.setOrgId(info.getOrgId());
            mszOrderHistory.setNo(info.getNo());
            mszOrderHistory.setLeaseId(info.getLeaseId());
            mszOrderHistory.setRoomId(info.getRoomId());
            mszOrderHistory.setLandlordId(info.getLandlordId());
            mszOrderHistory.setTenantId(info.getTenantId());
            mszOrderHistory.setId(info.getId());
            mszOrderHistory.setSchedulePrice(info.getSchedulePrice());
            mszOrderHistory.setPaidSchedulePrice(info.getSchedulePrice());
            mszOrderHistory.setRentPrice(info.getRentPrice());
            mszOrderHistory.setPaidRentPrice(info.getRentPrice());
            mszOrderHistory.setDepositPrice(info.getDepositPrice());
            mszOrderHistory.setPaidDepositPrice(info.getDepositPrice());
            mszOrderHistory.setReceiveTotal(info.getReceiveTotal());
            mszOrderHistory.setPaidTotal(info.getReceiveTotal());
            mszOrderHistory.setOweTotal(new BigDecimal(0));
            mszOrderHistory.setBreachPrice(info.getBreachPrice());
            mszOrderHistory.setEndTime(info.getEndTime());
            mszOrderHistory.setScheduleDesc(info.getScheduleDesc());
            mszOrderHistory.setStatus(info.getStatus());
            mszOrderHistory.setUpdateTime(new Date());
            mszOrderHistory.setCreateTime(new Date());
            //严格事务 关系到钱 !!!!!!!!!!!!!!!! 关系到钱 !!!!!!!!!!!!!!!! 关系到钱 !!!!!!!!!!!!!!!! 关系到钱 !!!!!!!!!!!!!!!!
            if (mszOrderHistoryService.insert(mszOrderHistory)) {
                try {
                    mszOrderInfoService.deleteById(id);
                } catch (Exception e) {
                    mszOrderHistoryService.deleteById(mszOrderHistory.getId());
                    return RespEntity.badRequest("付款失败");
                }
            }
        }
        return RespEntity.ok("付款成功");
    }

    @PostMapping("/insert")
    @ApiOperation(value = "保存MszOrderInfo", notes = "保存MszOrderInfo")
    @LoginRequired
    public RespEntity insert(HttpServletRequest request, @RequestBody MszOrderInfo mszOrderInfo) {
        SysUser sysUser = UserCommon.getCurrentUser();
        mszOrderInfo.setUpdateTime(new Date());
        if (!mszOrderInfoService.insert(mszOrderInfo)) {
            sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->新增->失败");
            return RespEntity.badRequest("保存失败");
        }
        sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->新增->成功");
        return RespEntity.ok("保存成功");
    }

    @PostMapping("/remind")
    @LoginRequired
    @ApiOperation(value = "提醒缴费", notes = "提醒缴费")
    public RespEntity remind(HttpServletRequest request, Integer id) {
        SysUser sysUser = UserCommon.getCurrentUser();
        try {
            if (!mszOrderInfoService.remind(id, sysUser)) {
                sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->提醒缴费->失败");
                return RespEntity.badRequest("提醒失败");
            }
            sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->提醒缴费->成功");
            return RespEntity.ok("提醒成功");
        } catch (Exception e) {
            logger.error(e.getLocalizedMessage());
            sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->提醒缴费->租约不存在");
            return RespEntity.badRequest("提醒失败,租约不存在");
        }
    }

    @PutMapping("/updateOrderInfo")
    @ApiOperation(value = "根据ID修改MszOrderInfo", notes = "根据ID修改MszOrderInfo")
    @LoginRequired
    public RespEntity updateOrderInfo(HttpServletRequest request, @RequestBody MszOrderInfo orderInfo) {
        SysUser sysUser = UserCommon.getCurrentUser();
        orderInfo.setArrearsFlag("1");
        if (orderInfo.getOweTotal().compareTo(new BigDecimal(0)) == 0) {
            orderInfo.setArrearsFlag("0");
        }
        if (!mszOrderInfoService.update(orderInfo, new EntityWrapper<MszOrderInfo>().eq("id", orderInfo.getId()))) {
            sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->修改->失败");
            return RespEntity.badRequest("更新失败");
        }
        sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->修改->成功");
        return RespEntity.ok("更新成功");
    }

    @PutMapping("/receiveOrder/{id}")
    @ApiOperation(value = "已收", notes = "已收")
    @LoginRequired
    public RespEntity receiveOrder(HttpServletRequest request, @PathVariable Integer id) {
        SysUser sysUser = UserCommon.getCurrentUser();
        try {
            if (!mszOrderInfoService.receiveOrder(id)) {
                sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->已收->失败");
                return RespEntity.badRequest("更新失败");
            }
            sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->已收->成功");
            return RespEntity.ok("更新成功");
        } catch (Exception e) {
            logger.error(e.getMessage());
            sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->已收->失败");
            return RespEntity.badRequest("更新失败");
        }
    }


    @DeleteMapping("{id}")
    @ApiOperation(value = "根据ID删除MszOrderInfo", notes = "根据ID删除MszOrderInfo")
    @LoginRequired
    public RespEntity delete(HttpServletRequest request, @PathVariable Integer id) {
        SysUser sysUser = UserCommon.getCurrentUser();
        if (!mszOrderInfoService.deleteById(id)) {
            sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->删除->失败");
            return RespEntity.badRequest("删除失败");
        }
        sysLogUtil.insertSysLog(request, sysUser.getId(), sysUser.getUsername(), "缴费信息->删除->成功");
        return RespEntity.ok("删除成功");
    }


}