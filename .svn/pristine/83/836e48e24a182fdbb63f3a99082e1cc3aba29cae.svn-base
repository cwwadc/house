package com.msz.Scheduler;

import com.aliyuncs.exceptions.ClientException;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.msz.VO.MessageTeamplate;
import com.msz.common.UserCommon;
import com.msz.dao.*;
import com.msz.model.*;
import com.msz.service.MszLeaseService;
import com.msz.service.MszOrderHistoryService;
import com.msz.service.SysUserService;
import com.msz.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.util.*;

/**
 * 房源定时器
 */
@Component
public class LeaseScheduler {

    private static Logger logger = LoggerFactory.getLogger(LeaseScheduler.class);

    MszRoomMapper mszRoomMapper;
    MszMessageMapper messageMapper;
    MszOrderInfoMapper orderInfoMapper;
    MszLeaseMapper leaseMapper;
    MszRefundInfoMapper refundInfoMapper;
    MszAccountMapper accountMapper;
    MszOrderHistoryMapper historyMapper;
    MszLeaseService leaseService;
    MszOrderHistoryService historyService;
    SysUserService userService;
    UserCommon userCommon;

    @Autowired
    public LeaseScheduler(MszRoomMapper mszRoomMapper, MszMessageMapper messageMapper, MszRefundInfoMapper refundInfoMapper,
                          MszOrderInfoMapper orderInfoMapper, MszLeaseMapper leaseMapper, MszAccountMapper accountMapper,
                          MszOrderHistoryMapper historyMapper, MszLeaseService leaseService, MszOrderHistoryService historyService,
                          SysUserService userService, UserCommon userCommon) {
        this.mszRoomMapper = mszRoomMapper;
        this.messageMapper = messageMapper;
        this.refundInfoMapper = refundInfoMapper;
        this.leaseMapper = leaseMapper;
        this.orderInfoMapper = orderInfoMapper;
        this.accountMapper = accountMapper;
        this.historyMapper = historyMapper;
        this.leaseService = leaseService;
        this.historyService = historyService;
        this.userService=userService;
        this.userCommon=userCommon;
    }

    /**
     * 预定到期时间释放房源
     */
    /*@Scheduled(fixedRate = 60000)*/
    @Scheduled(cron = "${lease.update.room.crop}")
    public void updateRoom() {
        //释放房源
        List<MszRoom> mszRoomList = mszRoomMapper.selectList(new EntityWrapper<MszRoom>()
                .eq("status", "1")
                .eq("isLock", "1"));
        if (mszRoomList != null && mszRoomList.size() > 0) {
            mszRoomList.forEach(item -> {
                Date endTime = item.getEndTime();
                Date date = new Date();
                int i = date.compareTo(endTime);//compareTo()方法的返回值，date1小于date2返回-1，date1大于date2返回1，相等返回0
                if (i > 0) {
                    logger.info("锁定时间超过预定结束时间未交费");
                    item.setStatus("0");
                    item.setIsLock("0");
                    mszRoomMapper.updateById(item);//释放房源（闲置）
                    MszLease lease = leaseService.selectOne(new EntityWrapper<MszLease>().eq("roomId", item.getId()).eq("status", "0"));
                    lease.setStatus("3");
                    leaseService.updateById(lease);
                    //新建租约逾期未交费 发送给房客
                    MszMessage message = new MszMessage();
                    message.setCreateTime(new Date());
                    message.setReceiverId(lease.getTenantId());//房客id
                    message.setType("1");//租约消息
                    String leaseNo = lease.getNo();//租约编号
                    String tenantName = accountMapper.selectById(lease.getTenantId()).getName();//房客名称
                    MessageTeamplate messageTeamplate = MessageTeamplateUtil.overdueTenant(tenantName, leaseNo);
                    message.setTitle(messageTeamplate.getTitle());
                    message.setContentText(messageTeamplate.getContentText());
                    messageMapper.insert(message);
                    //新建租约逾期未交费 发送给房东
                    message.setReceiverId(lease.getLandlordId());//房东id
                    String landlordName = accountMapper.selectById(lease.getLandlordId()).getName();//房东名称
                    MessageTeamplate messageTeamplate1 = MessageTeamplateUtil.overdueLandlord(landlordName, leaseNo);
                    message.setTitle(messageTeamplate1.getTitle());
                    message.setContentText(messageTeamplate1.getContentText());
                    messageMapper.insert(message);
                    //新建租约逾期未交费 发送给业务员
                    Integer userId = lease.getUserId();//业务员id
                    String salesmanName = userService.selectById(userId).getTrueName();//业务员名称
                    MessageTeamplate sendMessage = SendMessage.overdueSalesman(salesmanName, tenantName, leaseNo);
                    message.setReceiverId(userId);
                    message.setTitle(sendMessage.getTitle());
                    message.setContentText(sendMessage.getContentText());
                    message.setIsUser("1");
                    messageMapper.insert(message);
                }
            });
        }
    }

    /**
     * 租约到期
     */
    @Scheduled(cron = "${lease.update.room.crop}")
    public void updateStatusTask() {
        List<MszLease> leaseList = leaseMapper.selectList(new EntityWrapper<MszLease>()
                .eq("status", "1")
                .le(true, "endTime", new Date()));
        if (leaseList != null && leaseList.size() > 0) {
            leaseList.forEach(item -> {
                //修改租约状态为已结束
                item.setStatus("2");
                item.setIsRefundMoney("0");// 已退款
                leaseMapper.updateById(item);
                //释放房源
                MszRoom mszRoom = mszRoomMapper.selectById(item.getRoomId());
                mszRoom.setStatus("0");
                mszRoomMapper.updateById(mszRoom);
                //1.同时生成退款记录
                MszRefundInfo refundInfo = new MszRefundInfo();
                refundInfo.setCreateTime(new Date());
                refundInfo.setApplyTime(new Date());
                refundInfo.setDepositPrice(item.getDepositPrice());
                refundInfo.setRentPrice(new BigDecimal(0));//租金默认为0
                BigDecimal total = new BigDecimal(0).add(item.getDepositPrice()); //退款金额
                refundInfo.setTotal(total);
                refundInfo.setLeaseId(item.getId());
                String refundNo =UUIDUtils.getOrderIdByTime();
                refundInfo.setNo(refundNo);
                refundInfo.setUserId(item.getUserId());
                refundInfo.setTenantId(item.getTenantId());
                refundInfo.setLandlordId(item.getLandlordId());
                refundInfoMapper.insert(refundInfo);
                //推送消息
                sendMessage(item, total);

            });
        }
    }

    private void sendMessage(MszLease item, BigDecimal total) {
        //2.租约到期向房客推送消息
        MszMessage message = new MszMessage();
        message.setType("3");//退款消息
        message.setCreateTime(new Date());
        String leaseNo = item.getNo();//租约编号
        Integer tenantId = item.getTenantId();//房客id
        MszAccount tenantAccount = accountMapper.selectById(tenantId);
        String tenantName = tenantAccount.getName();//房客名称
        MessageTeamplate messageTeamplate = MessageTeamplateUtil.becomeDueLeaseTenant(tenantName, leaseNo, total);
        message.setReceiverId(tenantId);
        message.setTitle(messageTeamplate.getTitle());
        message.setContentText(messageTeamplate.getContentText());
        messageMapper.insert(message);
        //3.租约到期向房东推送消息
        Integer landlordId = item.getLandlordId();//房东id
        String landlordName = accountMapper.selectById(landlordId).getName();//房东名称
        MessageTeamplate messageTeamplate1 = MessageTeamplateUtil.becomeDueLeaseLandlord(landlordName, leaseNo, total);
        message.setReceiverId(landlordId);
        message.setTitle(messageTeamplate1.getTitle());
        message.setContentText(messageTeamplate1.getContentText());
        messageMapper.insert(message);
        //TODO
        // 4.租约到期发送短信给房客
        Map<String, Object> map = new HashMap<>();
        map.put("leaseNo",leaseNo);
        map.put("total",total);
        try {
            MoblieMessageUtil.sendSms( tenantAccount.getTel(), map, "SMS_171540962");
        } catch (ClientException e) {
            e.printStackTrace();
        }
        //5.租约到期向业务员推送消息
        Integer userId = item.getUserId();//业务员id
        String salesmanName = userService.selectById(userId).getTrueName();//业务员名称
        MessageTeamplate teamplate2 = SendMessage.becomeDueLeaseSalesman(salesmanName, tenantName,leaseNo, total);
        message.setReceiverId(userId);
        message.setTitle(teamplate2.getTitle());
        message.setContentText(teamplate2.getContentText());
        message.setIsUser("1");
        messageMapper.insert(message);
    }


}
